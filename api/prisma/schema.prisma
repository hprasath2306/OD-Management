// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id       String   @id @default(cuid())
  name     String?
  email    String?  @unique
  username String?  @unique
  role     UserRole

  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  forms Form[]

  requests Request[]

  admin   Admin?
  student Student?
  teacher Teacher?

  adminId   String?
  studentId String?
  teacherId String?
  Session   Session[]
}

model Subject {
  id          String  @id @default(cuid())
  subjectCode String  @unique // Unique code for each subject
  name        String // Name of the subject
  semester    String
  grades      Grade[] // Relationship to grades
}

model Grade {
  id          String @id @default(cuid())
  grade       String // Grade received by the student
  regNo       String
  subjectCode String

  student Student @relation(fields: [regNo], references: [regNo], onDelete: Cascade)
  subject Subject @relation(fields: [subjectCode], references: [subjectCode], onDelete: Cascade)

  @@index([regNo, subjectCode], name: "student_subject_index") // Ensures unique grades per student-subject pair
}

model Admin {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model College {
  id          String  @id @default(cuid())
  logo        String?
  coverImage  String?
  name        String?
  district    String?
  description String?

  code  String? @unique @default("xxxx")
  aishe String? @unique @default("C-xxxxx")

  state   String?
  pincode String?
  address String?
  phone   String?
  email   String?
}

model Department {
  id       String    @id @default(cuid())
  name     String
  code     String
  students Student[]
  hod      Teacher?

  @@index([name], name: "department_index")
  @@index([code], name: "department_index_code")
}

model Student {
  id String @id @default(cuid())

  regNo    String  @unique
  rollno   Int
  name     String
  year     Int
  section  String
  semester Int
  vertical String? @default("NONE")
  batch    String? @default("2021-2025")
  email    String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  Grade        Grade[]
}
// I still need to look into detail how approval flow works
// all id should be int and auto inc
model OD {
  id 
  reason
  description
  type
}

model Leave {
  id 
  reason
  description
  type
}

// list of reasons
model dropdown {
   id
   value
   key
   entityType - eg: 0 -OD, 1-Leave
   entityCustomFieldId?
}

// only denotes approval for which entity and it's status
model ApprovalEntity {
  id
  type -> 0,1,2 -> Hierarhial, custom approval
  status - 0,1,2,3,4,5,6 -> draft,submitted(awaiting approval),approved,rejected,recalled,forwarded?
  entityType - 0,1 -> OD,Leave
  entityId -> will refernce to OD if 0, else if leave if 1, so on
}

model ApprovalDetails {
  id
  type
  status - 0,1,2,3,4,5,6 -> draft,submitted(awaiting approval),approved,rejected,recalled,forwarded?
  entityType - 0,1 -> OD,Leave
  entityId -> will refernce to OD if 0, else if leave if 1, so on
  approverId -> user
  approvalId -> ApprovalEntity
}

model SharedEntity {
  entityType - 0,1 -> OD,Leave
  entityId -> will refernce to OD if 0, else if leave if 1, and so on
  accessType -> 111, 0 - 7, view,update,delete, -1 or 0 all access
  userId
}

model HistoryAndComments {
  commentId *PK
  entityType - 0,1 -> OD,Leave
  entityId -> will reference to OD if 0, else if leave if 1, and so on
  description
  previousstatus
  approvalstatus
  
  prevCommentId -> commentId *FK // only for nested commenting
  type
}

model EntityCustomField {
  id *PK
  name
  dataType
  type -> dropdown, check, text, text area, select
  entityType - 0,1 -> OD,Leave
  groupId?
  collegeId?
  departmentId?
  relationType -> only for group, only for dept, for everyone(college)
}

model CustomField {
  cfId
  entityType - 0,1 -> OD,Leave
  entityId -> will reference to OD if 0, else if leave if 1, and so on  
  value -> type any(probably string or blob)
}

model Group {
  groupId *PK
  name
  type -> 0,1,2, -> class subgroup -> year subgroup -> dept subgroup
  topLevelEntity -> 0,1 -> College, Coporation // create server level constant and have a relevant names for type
  partOfGroupId -> GroupId // I think it will be needed for us to regroup the groups under a yearIncharge, this removes need of approval type
}

model ApprovalSettings {
  id
  groupId?
  type -> 0,1,2,3 -> auto submit, any, to group head(tutor), only default
  approvalHierarchyNo -> 0,1,3 -> primary, secondary, so on
}


model CustomFlow {
  id
  entityType - 0,1 -> OD,Leave
  entityId -> will reference to OD if 0, else if leave if 1, and so on
  groupId
  name
  isEnabled
  criteriaID
}

// For now skip this impl for groupId, if -1 all group uses this, no explicit info need to be shown
model ApprovalFlow {
  approvalPolicyId -> -1 defaultPolicy
  approvalToType -> only group head, any staff, head of any group, head of specified group, head of specified group hierarchy
  approvalType -> manual, auto submit, auto reject
  customFLowId *FK (1 to many)
  order
//  below will be filled based on approvalToType
  designationID? 
  groupId?
  departmentId?
  cfId? 
}
//where entity means model/table

model criteria {
 criteriaId *PK
 logicalRepresentation String, eg: ((1&2)|3)
}

model relationalCriteria {
RELATIONALCRITERIAID *PK
 comparator - 0,1,2 -> equal, is, contains
 tableName
 colName
 value
 isCaseSensitive
 order -> criteria order number
 criteriaId *FK
}

model GroupApprovers {
  id
  approverId -> user/tutor
  groupId
  type -> 0,1,3 -> primary, secondary, so on
  subType -> 0,1,2 -> tutor, year , HOD
  isDefault
}

model Designation {
 id
 name
}

model Teacher {
  id String @id @default(cuid())

  departmentId String?     @unique
  designationId ->
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

enum FormType {
  ON_DUTY
  LEAVE
}

// The Form and Message models are used to store chat messages, we either use FORM(preferred for now, not scalable) or separate entites for OD and Leave
model Form {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  category String
  reason   String
  dates    DateTime[]

  requesterId String
  createdById String
  status -> approvalStatus ,0,1,3
  isArchived
  isCancelled
  isClosed

  formType FormType  @default(ON_DUTY)
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Request {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  status             RequestStatus
  requested          User          @relation(fields: [requestedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reasonForRejection String?

  form        Form   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId      String
  requestedId String
}

// The PasswordResetToken and VerificationToken models are used by the NextAuth.js authentication library
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Otp {
  id         String    @id @default(cuid())
  email      String    @unique
  otp        String
  expires    DateTime
  verifiedAt DateTime?

  @@unique([email, otp])
}
